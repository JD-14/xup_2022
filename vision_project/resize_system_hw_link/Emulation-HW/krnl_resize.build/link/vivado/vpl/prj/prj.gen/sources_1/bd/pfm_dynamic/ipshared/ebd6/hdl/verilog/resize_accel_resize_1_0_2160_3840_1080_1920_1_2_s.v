// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module resize_accel_resize_1_0_2160_3840_1080_1920_1_2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_src_rows_dout,
        p_src_rows_empty_n,
        p_src_rows_read,
        p_src_cols_dout,
        p_src_cols_empty_n,
        p_src_cols_read,
        in_mat_420_dout,
        in_mat_420_empty_n,
        in_mat_420_read,
        p_read,
        p_read1,
        out_mat_421_din,
        out_mat_421_full_n,
        out_mat_421_write,
        out_mat_rows_c_din,
        out_mat_rows_c_full_n,
        out_mat_rows_c_write,
        out_mat_cols_c_din,
        out_mat_cols_c_full_n,
        out_mat_cols_c_write,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_src_rows_dout;
input   p_src_rows_empty_n;
output   p_src_rows_read;
input  [31:0] p_src_cols_dout;
input   p_src_cols_empty_n;
output   p_src_cols_read;
input  [7:0] in_mat_420_dout;
input   in_mat_420_empty_n;
output   in_mat_420_read;
input  [31:0] p_read;
input  [31:0] p_read1;
output  [7:0] out_mat_421_din;
input   out_mat_421_full_n;
output   out_mat_421_write;
output  [31:0] out_mat_rows_c_din;
input   out_mat_rows_c_full_n;
output   out_mat_rows_c_write;
output  [31:0] out_mat_cols_c_din;
input   out_mat_cols_c_full_n;
output   out_mat_cols_c_write;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_rows_read;
reg p_src_cols_read;
reg in_mat_420_read;
reg out_mat_421_write;
reg out_mat_rows_c_write;
reg out_mat_cols_c_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_src_rows_blk_n;
reg    p_src_cols_blk_n;
reg    out_mat_rows_c_blk_n;
reg    out_mat_cols_c_blk_n;
reg   [31:0] p_src_cols_read_reg_108;
reg   [31:0] p_src_rows_read_reg_113;
wire    grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_start;
wire    grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_done;
wire    grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_idle;
wire    grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_ready;
wire    grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_in_mat_420_read;
wire   [7:0] grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_out_mat_421_din;
wire    grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_out_mat_421_write;
wire    grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_ext_blocking_n;
wire    grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_str_blocking_n;
wire    grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_int_blocking_n;
reg    grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_start_reg;
reg    ap_block_state1_ignore_call12;
wire    ap_CS_fsm_state2;
reg    ap_block_state1;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_int_blocking_cur_n;
reg    ap_ext_blocking_sub_n;
reg    ap_wait_0;
reg    ap_sub_ext_blocking_0;
reg    ap_str_blocking_sub_n;
reg    ap_sub_str_blocking_0;
reg    ap_int_blocking_sub_n;
reg    ap_sub_int_blocking_0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_start_reg = 1'b0;
end

resize_accel_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_start),
    .ap_done(grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_done),
    .ap_idle(grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_idle),
    .ap_ready(grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_ready),
    .p_read(p_src_rows_read_reg_113),
    .p_read1(p_src_cols_read_reg_108),
    .in_mat_420_dout(in_mat_420_dout),
    .in_mat_420_empty_n(in_mat_420_empty_n),
    .in_mat_420_read(grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_in_mat_420_read),
    .p_read2(p_read),
    .p_read3(p_read1),
    .out_mat_421_din(grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_out_mat_421_din),
    .out_mat_421_full_n(out_mat_421_full_n),
    .out_mat_421_write(grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_out_mat_421_write),
    .ap_ext_blocking_n(grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_ext_blocking_n),
    .ap_str_blocking_n(grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_str_blocking_n),
    .ap_int_blocking_n(grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_int_blocking_n)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (out_mat_cols_c_full_n == 1'b0) | (out_mat_rows_c_full_n == 1'b0) | (p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_start_reg <= 1'b1;
        end else if ((grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_ready == 1'b1)) begin
            grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        p_src_cols_read_reg_108 <= p_src_cols_dout;
        p_src_rows_read_reg_113 <= p_src_rows_dout;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (out_mat_cols_c_full_n == 1'b0) | (out_mat_rows_c_full_n == 1'b0) | (p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_ext_blocking_0) == 1'b1)) begin
        ap_ext_blocking_sub_n = 1'b0;
    end else begin
        ap_ext_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_int_blocking_0) == 1'b1)) begin
        ap_int_blocking_sub_n = 1'b0;
    end else begin
        ap_int_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_str_blocking_0) == 1'b1)) begin
        ap_str_blocking_sub_n = 1'b0;
    end else begin
        ap_str_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if ((grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_ext_blocking_n == 1'b0)) begin
        ap_sub_ext_blocking_0 = 1'b1;
    end else begin
        ap_sub_ext_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_int_blocking_n == 1'b0)) begin
        ap_sub_int_blocking_0 = 1'b1;
    end else begin
        ap_sub_int_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_str_blocking_n == 1'b0)) begin
        ap_sub_str_blocking_0 = 1'b1;
    end else begin
        ap_sub_str_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state2 == ap_CS_fsm)) begin
        ap_wait_0 = 1'b1;
    end else begin
        ap_wait_0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_mat_420_read = grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_in_mat_420_read;
    end else begin
        in_mat_420_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_mat_421_write = grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_out_mat_421_write;
    end else begin
        out_mat_421_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_mat_cols_c_blk_n = out_mat_cols_c_full_n;
    end else begin
        out_mat_cols_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (out_mat_cols_c_full_n == 1'b0) | (out_mat_rows_c_full_n == 1'b0) | (p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_mat_cols_c_write = 1'b1;
    end else begin
        out_mat_cols_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_mat_rows_c_blk_n = out_mat_rows_c_full_n;
    end else begin
        out_mat_rows_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (out_mat_cols_c_full_n == 1'b0) | (out_mat_rows_c_full_n == 1'b0) | (p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_mat_rows_c_write = 1'b1;
    end else begin
        out_mat_rows_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_blk_n = p_src_cols_empty_n;
    end else begin
        p_src_cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (out_mat_cols_c_full_n == 1'b0) | (out_mat_rows_c_full_n == 1'b0) | (p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_read = 1'b1;
    end else begin
        p_src_cols_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_rows_blk_n = p_src_rows_empty_n;
    end else begin
        p_src_rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (out_mat_cols_c_full_n == 1'b0) | (out_mat_rows_c_full_n == 1'b0) | (p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_rows_read = 1'b1;
    end else begin
        p_src_rows_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (out_mat_cols_c_full_n == 1'b0) | (out_mat_rows_c_full_n == 1'b0) | (p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (out_mat_cols_c_full_n == 1'b0) | (out_mat_rows_c_full_n == 1'b0) | (p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call12 = ((ap_start == 1'b0) | (out_mat_cols_c_full_n == 1'b0) | (out_mat_rows_c_full_n == 1'b0) | (p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ext_blocking_n = (ap_ext_blocking_sub_n & 1'b1);

assign ap_int_blocking_cur_n = (p_src_rows_blk_n & p_src_cols_blk_n & out_mat_rows_c_blk_n & out_mat_cols_c_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_sub_n & ap_int_blocking_cur_n);

assign ap_str_blocking_n = (ap_str_blocking_sub_n & 1'b1);

assign grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_start = grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_ap_start_reg;

assign out_mat_421_din = grp_resizeNNBilinear_0_2160_3840_1_1080_1920_1_2_s_fu_82_out_mat_421_din;

assign out_mat_cols_c_din = p_read1;

assign out_mat_rows_c_din = p_read;

endmodule //resize_accel_resize_1_0_2160_3840_1080_1920_1_2_s
