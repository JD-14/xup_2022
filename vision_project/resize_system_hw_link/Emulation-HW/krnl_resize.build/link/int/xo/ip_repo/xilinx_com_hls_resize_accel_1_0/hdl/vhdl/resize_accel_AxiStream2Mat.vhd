-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity resize_accel_AxiStream2Mat is
port (
    ldata1_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    ldata1_empty_n : IN STD_LOGIC;
    ldata1_read : OUT STD_LOGIC;
    in_mat_420_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_mat_420_full_n : IN STD_LOGIC;
    in_mat_420_write : OUT STD_LOGIC;
    rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    rows_empty_n : IN STD_LOGIC;
    rows_read : OUT STD_LOGIC;
    cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    cols_empty_n : IN STD_LOGIC;
    cols_read : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of resize_accel_AxiStream2Mat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal last_blk_pxl_width_U0_ap_start : STD_LOGIC;
    signal last_blk_pxl_width_U0_ap_done : STD_LOGIC;
    signal last_blk_pxl_width_U0_ap_continue : STD_LOGIC;
    signal last_blk_pxl_width_U0_ap_idle : STD_LOGIC;
    signal last_blk_pxl_width_U0_ap_ready : STD_LOGIC;
    signal last_blk_pxl_width_U0_return_r : STD_LOGIC_VECTOR (3 downto 0);
    signal last_blk_pxl_width_U0_ap_ext_blocking_n : STD_LOGIC;
    signal last_blk_pxl_width_U0_ap_str_blocking_n : STD_LOGIC;
    signal last_blk_pxl_width_U0_ap_int_blocking_n : STD_LOGIC;
    signal last_blk_width_channel_full_n : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_ap_start : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_ap_done : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_ap_continue : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_ap_idle : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_ap_ready : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_ldata1_read : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_in_mat_420_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AxiStream2MatStream_2_U0_in_mat_420_write : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_rows_read : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_cols_bound_per_npc_read : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_ap_ext_blocking_n : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_ap_str_blocking_n : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_ap_int_blocking_n : STD_LOGIC;
    signal last_blk_width_channel_dout : STD_LOGIC_VECTOR (3 downto 0);
    signal last_blk_width_channel_empty_n : STD_LOGIC;
    signal ap_ext_blocking_cur_n : STD_LOGIC;
    signal ap_str_blocking_cur_n : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_sub_n : STD_LOGIC;
    signal ap_str_blocking_sub_n : STD_LOGIC;
    signal ap_int_blocking_sub_n : STD_LOGIC;

    component resize_accel_last_blk_pxl_width IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        return_r : OUT STD_LOGIC_VECTOR (3 downto 0);
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component resize_accel_AxiStream2MatStream_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ldata1_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        ldata1_empty_n : IN STD_LOGIC;
        ldata1_read : OUT STD_LOGIC;
        in_mat_420_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_mat_420_full_n : IN STD_LOGIC;
        in_mat_420_write : OUT STD_LOGIC;
        rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_empty_n : IN STD_LOGIC;
        rows_read : OUT STD_LOGIC;
        cols_bound_per_npc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cols_bound_per_npc_empty_n : IN STD_LOGIC;
        cols_bound_per_npc_read : OUT STD_LOGIC;
        last_blk_width : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component resize_accel_fifo_w4_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (3 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    last_blk_pxl_width_U0 : component resize_accel_last_blk_pxl_width
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => last_blk_pxl_width_U0_ap_start,
        ap_done => last_blk_pxl_width_U0_ap_done,
        ap_continue => last_blk_pxl_width_U0_ap_continue,
        ap_idle => last_blk_pxl_width_U0_ap_idle,
        ap_ready => last_blk_pxl_width_U0_ap_ready,
        return_r => last_blk_pxl_width_U0_return_r,
        ap_ext_blocking_n => last_blk_pxl_width_U0_ap_ext_blocking_n,
        ap_str_blocking_n => last_blk_pxl_width_U0_ap_str_blocking_n,
        ap_int_blocking_n => last_blk_pxl_width_U0_ap_int_blocking_n);

    AxiStream2MatStream_2_U0 : component resize_accel_AxiStream2MatStream_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => AxiStream2MatStream_2_U0_ap_start,
        ap_done => AxiStream2MatStream_2_U0_ap_done,
        ap_continue => AxiStream2MatStream_2_U0_ap_continue,
        ap_idle => AxiStream2MatStream_2_U0_ap_idle,
        ap_ready => AxiStream2MatStream_2_U0_ap_ready,
        ldata1_dout => ldata1_dout,
        ldata1_empty_n => ldata1_empty_n,
        ldata1_read => AxiStream2MatStream_2_U0_ldata1_read,
        in_mat_420_din => AxiStream2MatStream_2_U0_in_mat_420_din,
        in_mat_420_full_n => in_mat_420_full_n,
        in_mat_420_write => AxiStream2MatStream_2_U0_in_mat_420_write,
        rows_dout => rows_dout,
        rows_empty_n => rows_empty_n,
        rows_read => AxiStream2MatStream_2_U0_rows_read,
        cols_bound_per_npc_dout => cols_dout,
        cols_bound_per_npc_empty_n => cols_empty_n,
        cols_bound_per_npc_read => AxiStream2MatStream_2_U0_cols_bound_per_npc_read,
        last_blk_width => last_blk_width_channel_dout,
        ap_ext_blocking_n => AxiStream2MatStream_2_U0_ap_ext_blocking_n,
        ap_str_blocking_n => AxiStream2MatStream_2_U0_ap_str_blocking_n,
        ap_int_blocking_n => AxiStream2MatStream_2_U0_ap_int_blocking_n);

    last_blk_width_channel_U : component resize_accel_fifo_w4_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => last_blk_pxl_width_U0_return_r,
        if_full_n => last_blk_width_channel_full_n,
        if_write => last_blk_pxl_width_U0_ap_done,
        if_dout => last_blk_width_channel_dout,
        if_empty_n => last_blk_width_channel_empty_n,
        if_read => AxiStream2MatStream_2_U0_ap_ready);




    AxiStream2MatStream_2_U0_ap_continue <= ap_continue;
    AxiStream2MatStream_2_U0_ap_start <= last_blk_width_channel_empty_n;
    ap_done <= AxiStream2MatStream_2_U0_ap_done;
    ap_ext_blocking_cur_n <= ap_const_logic_1;
    ap_ext_blocking_n <= (ap_ext_blocking_sub_n and ap_ext_blocking_cur_n);
    ap_ext_blocking_sub_n <= (last_blk_pxl_width_U0_ap_ext_blocking_n and AxiStream2MatStream_2_U0_ap_ext_blocking_n);
    ap_idle <= (last_blk_pxl_width_U0_ap_idle and (last_blk_width_channel_empty_n xor ap_const_logic_1) and AxiStream2MatStream_2_U0_ap_idle);
    ap_int_blocking_cur_n <= ap_const_logic_1;
    ap_int_blocking_n <= (ap_int_blocking_sub_n and ap_int_blocking_cur_n);
    ap_int_blocking_sub_n <= (last_blk_pxl_width_U0_ap_int_blocking_n and AxiStream2MatStream_2_U0_ap_int_blocking_n);
    ap_ready <= last_blk_pxl_width_U0_ap_ready;
    ap_str_blocking_cur_n <= ap_const_logic_1;
    ap_str_blocking_n <= (ap_str_blocking_sub_n and ap_str_blocking_cur_n);
    ap_str_blocking_sub_n <= (last_blk_pxl_width_U0_ap_str_blocking_n and AxiStream2MatStream_2_U0_ap_str_blocking_n);
    cols_read <= AxiStream2MatStream_2_U0_cols_bound_per_npc_read;
    in_mat_420_din <= AxiStream2MatStream_2_U0_in_mat_420_din;
    in_mat_420_write <= AxiStream2MatStream_2_U0_in_mat_420_write;
    last_blk_pxl_width_U0_ap_continue <= last_blk_width_channel_full_n;
    last_blk_pxl_width_U0_ap_start <= ap_start;
    ldata1_read <= AxiStream2MatStream_2_U0_ldata1_read;
    rows_read <= AxiStream2MatStream_2_U0_rows_read;
end behav;
