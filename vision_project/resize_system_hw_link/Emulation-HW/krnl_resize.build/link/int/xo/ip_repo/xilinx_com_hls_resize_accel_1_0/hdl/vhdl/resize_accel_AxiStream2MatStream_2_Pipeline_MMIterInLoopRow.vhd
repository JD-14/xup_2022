-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity resize_accel_AxiStream2MatStream_2_Pipeline_MMIterInLoopRow is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ldata1_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    ldata1_empty_n : IN STD_LOGIC;
    ldata1_read : OUT STD_LOGIC;
    in_mat_420_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_mat_420_full_n : IN STD_LOGIC;
    in_mat_420_write : OUT STD_LOGIC;
    bound : IN STD_LOGIC_VECTOR (31 downto 0);
    sext_ln1021 : IN STD_LOGIC_VECTOR (4 downto 0);
    cols_bound_per_npc_load : IN STD_LOGIC_VECTOR (31 downto 0);
    sub : IN STD_LOGIC_VECTOR (31 downto 0);
    last_blk_width_load : IN STD_LOGIC_VECTOR (3 downto 0);
    sub4 : IN STD_LOGIC_VECTOR (7 downto 0);
    add_ln1021 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of resize_accel_AxiStream2MatStream_2_Pipeline_MMIterInLoopRow is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv8_87 : STD_LOGIC_VECTOR (7 downto 0) := "10000111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv8_81 : STD_LOGIC_VECTOR (7 downto 0) := "10000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln1001_reg_845 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1012_reg_854 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op112_read_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal icmp_ln1032_reg_939 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1032_reg_939_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1001_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ldata1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal in_mat_420_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal bLast_width_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_849 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_849_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1012_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln674_1_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln674_1_reg_858 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln674_1_fu_288_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln674_1_reg_865 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln674_2_fu_292_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln674_2_reg_872 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln674_5_fu_296_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln674_5_reg_878 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1013_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_883 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1014_fu_319_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1014_reg_888 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln674_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln674_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln674_fu_339_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln674_reg_900 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln674_fu_343_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln674_reg_907 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln674_1_fu_373_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln674_1_reg_912 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln414_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_reg_917 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln414_fu_385_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln414_reg_925 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln414_1_fu_389_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln414_1_reg_933 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1032_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal localbuffer_V_6_fu_511_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_12_fu_735_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_localbuffer_V_8_reg_169 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_localbuffer_V_8_reg_169 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_localbuffer_V_8_reg_169 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_169 : STD_LOGIC_VECTOR (7 downto 0);
    signal rem_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_2_fu_302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_1_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_102 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln1001_fu_215_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_fu_421_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_110 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln1001_fu_206_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xf_bits_per_clock_fu_233_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ptr_width_minus_fu_248_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1007_fu_240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1021_fu_265_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1021_fu_272_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1021_fu_276_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_323_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln1007_1_fu_244_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1018_fu_349_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1018_fu_363_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1018_1_fu_359_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln674_3_fu_367_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1018_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1008_fu_255_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1033_fu_415_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln674_4_fu_452_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln674_6_fu_456_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_442_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln674_3_fu_460_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln674_5_fu_474_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln674_7_fu_479_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln674_4_fu_467_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln674_3_fu_485_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln674_4_fu_489_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln674_3_fu_493_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln674_4_fu_499_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_13_fu_505_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln674_fu_525_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln674_1_fu_530_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_515_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln674_fu_535_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln674_2_fu_549_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln674_2_fu_554_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln674_1_fu_542_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln674_fu_560_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln674_1_fu_564_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln674_fu_568_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln674_1_fu_574_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_s_fu_580_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln414_fu_590_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln414_fu_595_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_586_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln414_fu_599_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_10_fu_605_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln674_2_fu_618_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln674_2_fu_621_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_11_fu_627_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln414_1_fu_637_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln414_fu_642_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln414_2_fu_652_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln414_1_fu_647_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln414_2_fu_658_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_fu_633_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln414_1_fu_664_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln414_fu_676_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_682_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln414_2_fu_668_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln414_3_fu_672_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln414_1_fu_699_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln414_1_fu_705_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln414_fu_711_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal localbuffer_V_fu_611_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln414_fu_717_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln414_3_fu_692_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln414_1_fu_723_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln414_2_fu_729_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln674_3_fu_746_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln674_8_fu_749_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln674_5_fu_755_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln674_5_fu_759_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1006_fu_765_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_661 : BOOLEAN;
    signal ap_condition_664 : BOOLEAN;
    signal ap_condition_667 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component resize_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component resize_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if (((icmp_ln1012_reg_854 = ap_const_lv1_0) and (icmp_ln1001_reg_845 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_169 <= localbuffer_V_6_fu_511_p1;
                elsif (((icmp_ln1012_reg_854 = ap_const_lv1_1) and (icmp_ln1001_reg_845 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_169 <= p_Result_12_fu_735_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_169 <= ap_phi_reg_pp0_iter2_localbuffer_V_8_reg_169;
                end if;
            end if; 
        end if;
    end process;

    i_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_102 <= ap_const_lv31_0;
                elsif (((icmp_ln1001_fu_210_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_102 <= add_ln1001_fu_215_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_106 <= ap_const_lv32_0;
                elsif (((icmp_ln1001_fu_210_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_106 <= j_2_fu_421_p3;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    p_Val2_s_fu_110 <= ap_const_lv128_lc_1;
                elsif ((ap_const_boolean_1 = ap_condition_661)) then 
                    p_Val2_s_fu_110 <= ldata1_dout;
                end if;
            end if; 
        end if;
    end process;

    rem_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    rem_fu_98 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_667)) then 
                    rem_fu_98 <= rem_1_fu_393_p2;
                elsif ((ap_const_boolean_1 = ap_condition_664)) then 
                    rem_fu_98 <= rem_2_fu_302_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1001_fu_210_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1012_fu_259_p2 = ap_const_lv1_1))) then
                add_ln674_1_reg_912 <= add_ln674_1_fu_373_p2;
                icmp_ln1013_reg_883 <= icmp_ln1013_fu_313_p2;
                icmp_ln414_reg_917 <= icmp_ln414_fu_379_p2;
                icmp_ln674_reg_893 <= icmp_ln674_fu_333_p2;
                sub_ln674_reg_907 <= sub_ln674_fu_343_p2;
                trunc_ln1014_reg_888 <= trunc_ln1014_fu_319_p1;
                trunc_ln414_1_reg_933 <= trunc_ln414_1_fu_389_p1;
                trunc_ln414_reg_925 <= trunc_ln414_fu_385_p1;
                trunc_ln674_reg_900 <= trunc_ln674_fu_339_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln1001_reg_845 <= icmp_ln1001_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_localbuffer_V_8_reg_169 <= ap_phi_reg_pp0_iter0_localbuffer_V_8_reg_169;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_localbuffer_V_8_reg_169 <= ap_phi_reg_pp0_iter1_localbuffer_V_8_reg_169;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1001_fu_210_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                bLast_width_reg_849 <= bLast_width_fu_228_p2;
                icmp_ln1012_reg_854 <= icmp_ln1012_fu_259_p2;
                icmp_ln1032_reg_939 <= icmp_ln1032_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                bLast_width_reg_849_pp0_iter2_reg <= bLast_width_reg_849;
                icmp_ln1032_reg_939_pp0_iter2_reg <= icmp_ln1032_reg_939;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1001_fu_210_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1012_fu_259_p2 = ap_const_lv1_0))) then
                icmp_ln674_1_reg_858 <= icmp_ln674_1_fu_282_p2;
                sub_ln674_5_reg_878 <= sub_ln674_5_fu_296_p2;
                trunc_ln674_1_reg_865 <= trunc_ln674_1_fu_288_p1;
                trunc_ln674_2_reg_872 <= trunc_ln674_2_fu_292_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1001_fu_215_p2 <= std_logic_vector(unsigned(i_fu_102) + unsigned(ap_const_lv31_1));
    add_ln1018_fu_349_p2 <= std_logic_vector(unsigned(zext_ln1007_1_fu_244_p1) + unsigned(ap_const_lv5_1F));
    add_ln1033_fu_415_p2 <= std_logic_vector(unsigned(j_fu_106) + unsigned(ap_const_lv32_1));
    add_ln674_1_fu_373_p2 <= std_logic_vector(unsigned(sub_ln674_3_fu_367_p2) + unsigned(ap_const_lv8_7F));
    add_ln674_fu_525_p2 <= std_logic_vector(unsigned(trunc_ln674_reg_900) + unsigned(ap_const_lv8_81));
    and_ln414_1_fu_723_p2 <= (xor_ln414_fu_717_p2 and localbuffer_V_fu_611_p3);
    and_ln414_2_fu_729_p2 <= (select_ln414_3_fu_692_p3 and and_ln414_fu_711_p2);
    and_ln414_fu_711_p2 <= (shl_ln414_1_fu_699_p2 and lshr_ln414_1_fu_705_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ldata1_empty_n, ap_predicate_op112_read_state3, in_mat_420_full_n, icmp_ln1032_reg_939_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln1032_reg_939_pp0_iter2_reg = ap_const_lv1_1) and (in_mat_420_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_predicate_op112_read_state3 = ap_const_boolean_1) and (ldata1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ldata1_empty_n, ap_predicate_op112_read_state3, in_mat_420_full_n, icmp_ln1032_reg_939_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln1032_reg_939_pp0_iter2_reg = ap_const_lv1_1) and (in_mat_420_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_predicate_op112_read_state3 = ap_const_boolean_1) and (ldata1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ldata1_empty_n, ap_predicate_op112_read_state3, in_mat_420_full_n, icmp_ln1032_reg_939_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln1032_reg_939_pp0_iter2_reg = ap_const_lv1_1) and (in_mat_420_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_predicate_op112_read_state3 = ap_const_boolean_1) and (ldata1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_assign_proc : process(ldata1_empty_n, ap_predicate_op112_read_state3)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((ap_predicate_op112_read_state3 = ap_const_boolean_1) and (ldata1_empty_n = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(in_mat_420_full_n, icmp_ln1032_reg_939_pp0_iter2_reg)
    begin
                ap_block_state4_pp0_stage0_iter3 <= ((icmp_ln1032_reg_939_pp0_iter2_reg = ap_const_lv1_1) and (in_mat_420_full_n = ap_const_logic_0));
    end process;


    ap_condition_661_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1001_reg_845, icmp_ln1012_reg_854)
    begin
                ap_condition_661 <= ((icmp_ln1012_reg_854 = ap_const_lv1_1) and (icmp_ln1001_reg_845 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_condition_664_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln1001_fu_210_p2, icmp_ln1012_fu_259_p2)
    begin
                ap_condition_664 <= ((icmp_ln1001_fu_210_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1012_fu_259_p2 = ap_const_lv1_0));
    end process;


    ap_condition_667_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln1001_fu_210_p2, icmp_ln1012_fu_259_p2)
    begin
                ap_condition_667 <= ((icmp_ln1001_fu_210_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1012_fu_259_p2 = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1001_fu_210_p2)
    begin
        if (((icmp_ln1001_fu_210_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;
    ap_ext_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (ldata1_blk_n and in_mat_420_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_cur_n and ap_const_logic_1);
    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_phi_reg_pp0_iter0_localbuffer_V_8_reg_169 <= "XXXXXXXX";

    ap_predicate_op112_read_state3_assign_proc : process(icmp_ln1001_reg_845, icmp_ln1012_reg_854)
    begin
                ap_predicate_op112_read_state3 <= ((icmp_ln1012_reg_854 = ap_const_lv1_1) and (icmp_ln1001_reg_845 = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    bLast_width_fu_228_p2 <= "1" when (j_fu_106 = sub) else "0";
    grp_fu_178_p2 <= std_logic_vector(unsigned(ap_const_lv32_80) - unsigned(rem_fu_98));
    icmp_ln1001_fu_210_p2 <= "1" when (signed(zext_ln1001_fu_206_p1) < signed(bound)) else "0";
    icmp_ln1012_fu_259_p2 <= "1" when (signed(rem_fu_98) < signed(zext_ln1007_fu_240_p1)) else "0";
    icmp_ln1013_fu_313_p2 <= "1" when (rem_fu_98 = ap_const_lv32_0) else "0";
    icmp_ln1032_fu_407_p2 <= "1" when (signed(j_fu_106) < signed(cols_bound_per_npc_load)) else "0";
    icmp_ln414_fu_379_p2 <= "1" when (unsigned(rem_fu_98) > unsigned(sext_ln1018_fu_355_p1)) else "0";
    icmp_ln674_1_fu_282_p2 <= "1" when (unsigned(grp_fu_178_p2) > unsigned(sub_ln1021_fu_276_p2)) else "0";
    icmp_ln674_fu_333_p2 <= "0" when (tmp_fu_323_p4 = ap_const_lv25_0) else "1";

    in_mat_420_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, in_mat_420_full_n, icmp_ln1032_reg_939_pp0_iter2_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln1032_reg_939_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            in_mat_420_blk_n <= in_mat_420_full_n;
        else 
            in_mat_420_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_mat_420_din <= (select_ln1006_fu_765_p3 and ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_169);

    in_mat_420_write_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln1032_reg_939_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1032_reg_939_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            in_mat_420_write <= ap_const_logic_1;
        else 
            in_mat_420_write <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_421_p3 <= 
        ap_const_lv32_0 when (bLast_width_fu_228_p2(0) = '1') else 
        add_ln1033_fu_415_p2;

    ldata1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, ldata1_empty_n, ap_predicate_op112_read_state3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op112_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ldata1_blk_n <= ldata1_empty_n;
        else 
            ldata1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ldata1_read_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op112_read_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op112_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ldata1_read <= ap_const_logic_1;
        else 
            ldata1_read <= ap_const_logic_0;
        end if; 
    end process;

    localbuffer_V_6_fu_511_p1 <= p_Result_13_fu_505_p2(8 - 1 downto 0);
    localbuffer_V_fu_611_p3 <= 
        ap_const_lv8_0 when (icmp_ln1013_reg_883(0) = '1') else 
        p_Result_10_fu_605_p2;
    lshr_ln414_1_fu_705_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln414_3_fu_672_p1(8-1 downto 0)))));
    lshr_ln414_fu_599_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln414_fu_595_p1(8-1 downto 0)))));
    lshr_ln674_1_fu_574_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln674_1_fu_564_p1(31-1 downto 0)))));
    lshr_ln674_2_fu_621_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln674_2_fu_618_p1(31-1 downto 0)))));
    lshr_ln674_3_fu_493_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_4_fu_467_p3),to_integer(unsigned('0' & zext_ln674_3_fu_485_p1(31-1 downto 0)))));
    lshr_ln674_4_fu_499_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln674_4_fu_489_p1(31-1 downto 0)))));
    lshr_ln674_5_fu_759_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln674_5_fu_755_p1(8-1 downto 0)))));
    lshr_ln674_fu_568_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_1_fu_542_p3),to_integer(unsigned('0' & zext_ln674_fu_560_p1(31-1 downto 0)))));
    p_Result_10_fu_605_p2 <= (tmp_14_fu_586_p1 and lshr_ln414_fu_599_p2);
    p_Result_11_fu_627_p2 <= (lshr_ln674_2_fu_621_p2 and ldata1_dout);
    p_Result_12_fu_735_p2 <= (and_ln414_2_fu_729_p2 or and_ln414_1_fu_723_p2);
    p_Result_13_fu_505_p2 <= (lshr_ln674_4_fu_499_p2 and lshr_ln674_3_fu_493_p2);
    p_Result_s_fu_580_p2 <= (lshr_ln674_fu_568_p2 and lshr_ln674_1_fu_574_p2);
    ptr_width_minus_fu_248_p3 <= 
        sub4 when (bLast_width_fu_228_p2(0) = '1') else 
        ap_const_lv8_78;
    rem_1_fu_393_p2 <= std_logic_vector(unsigned(rem_fu_98) + unsigned(zext_ln1008_fu_255_p1));
    rem_2_fu_302_p2 <= std_logic_vector(unsigned(rem_fu_98) - unsigned(zext_ln1007_fu_240_p1));
    select_ln1006_fu_765_p3 <= 
        lshr_ln674_5_fu_759_p2 when (bLast_width_reg_849_pp0_iter2_reg(0) = '1') else 
        ap_const_lv8_FF;
    select_ln1021_fu_265_p3 <= 
        add_ln1021 when (bLast_width_fu_228_p2(0) = '1') else 
        ap_const_lv8_87;
    select_ln414_1_fu_647_p3 <= 
        trunc_ln414_1_reg_933 when (icmp_ln414_reg_917(0) = '1') else 
        trunc_ln414_reg_925;
    select_ln414_2_fu_652_p3 <= 
        sub_ln414_1_fu_637_p2 when (icmp_ln414_reg_917(0) = '1') else 
        trunc_ln414_reg_925;
    select_ln414_3_fu_692_p3 <= 
        tmp_12_fu_682_p4 when (icmp_ln414_reg_917(0) = '1') else 
        shl_ln414_fu_676_p2;
    select_ln414_fu_642_p3 <= 
        trunc_ln414_reg_925 when (icmp_ln414_reg_917(0) = '1') else 
        trunc_ln414_1_reg_933;
    select_ln674_1_fu_542_p3 <= 
        tmp_8_fu_515_p4 when (icmp_ln674_reg_893(0) = '1') else 
        p_Val2_s_fu_110;
    select_ln674_2_fu_549_p3 <= 
        sub_ln674_reg_907 when (icmp_ln674_reg_893(0) = '1') else 
        trunc_ln674_reg_900;
    select_ln674_3_fu_460_p3 <= 
        sub_ln674_4_fu_452_p2 when (icmp_ln674_1_reg_858(0) = '1') else 
        sub_ln674_6_fu_456_p2;
    select_ln674_4_fu_467_p3 <= 
        tmp_13_fu_442_p4 when (icmp_ln674_1_reg_858(0) = '1') else 
        p_Val2_s_fu_110;
    select_ln674_5_fu_474_p3 <= 
        sub_ln674_5_reg_878 when (icmp_ln674_1_reg_858(0) = '1') else 
        trunc_ln674_1_reg_865;
    select_ln674_fu_535_p3 <= 
        add_ln674_fu_525_p2 when (icmp_ln674_reg_893(0) = '1') else 
        sub_ln674_1_fu_530_p2;
        sext_ln1018_1_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1018_fu_349_p2),8));

        sext_ln1018_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1018_fu_349_p2),32));

    shl_ln414_1_fu_699_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln414_2_fu_668_p1(8-1 downto 0)))));
    shl_ln414_fu_676_p2 <= std_logic_vector(shift_left(unsigned(tmp_16_fu_633_p1),to_integer(unsigned('0' & zext_ln414_1_fu_664_p1(8-1 downto 0)))));
    sub_ln1021_fu_276_p2 <= std_logic_vector(unsigned(zext_ln1021_fu_272_p1) - unsigned(rem_fu_98));
    sub_ln414_1_fu_637_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(trunc_ln414_reg_925));
    sub_ln414_2_fu_658_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(select_ln414_fu_642_p3));
    sub_ln414_fu_590_p2 <= std_logic_vector(signed(ap_const_lv4_8) - signed(trunc_ln1014_reg_888));
    sub_ln674_1_fu_530_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(trunc_ln674_reg_900));
    sub_ln674_2_fu_554_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(select_ln674_fu_535_p3));
    sub_ln674_3_fu_367_p2 <= std_logic_vector(unsigned(trunc_ln1018_fu_363_p1) - unsigned(sext_ln1018_1_fu_359_p1));
    sub_ln674_4_fu_452_p2 <= std_logic_vector(unsigned(trunc_ln674_1_reg_865) - unsigned(trunc_ln674_2_reg_872));
    sub_ln674_5_fu_296_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(trunc_ln674_1_fu_288_p1));
    sub_ln674_6_fu_456_p2 <= std_logic_vector(unsigned(trunc_ln674_2_reg_872) - unsigned(trunc_ln674_1_reg_865));
    sub_ln674_7_fu_479_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(select_ln674_3_fu_460_p3));
    sub_ln674_8_fu_749_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(trunc_ln674_3_fu_746_p1));
    sub_ln674_fu_343_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(trunc_ln674_fu_339_p1));
    
    tmp_12_fu_682_p4_proc : process(shl_ln414_fu_676_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_12_fu_682_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_7(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := shl_ln414_fu_676_p2;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_7(3-1 downto 0)));
            for tmp_12_fu_682_p4_i in 0 to 8-1 loop
                v0_cpy(tmp_12_fu_682_p4_i) := shl_ln414_fu_676_p2(8-1-tmp_12_fu_682_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(8-1 downto 0)))));
        res_mask := res_mask(8-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_12_fu_682_p4 <= resvalue(8-1 downto 0);
    end process;

    
    tmp_13_fu_442_p4_proc : process(p_Val2_s_fu_110)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_13_fu_442_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_Val2_s_fu_110;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_13_fu_442_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_13_fu_442_p4_i) := p_Val2_s_fu_110(128-1-tmp_13_fu_442_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_13_fu_442_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_14_fu_586_p1 <= p_Result_s_fu_580_p2(8 - 1 downto 0);
    tmp_16_fu_633_p1 <= p_Result_11_fu_627_p2(8 - 1 downto 0);
    
    tmp_8_fu_515_p4_proc : process(p_Val2_s_fu_110)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_8_fu_515_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_Val2_s_fu_110;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_8_fu_515_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_8_fu_515_p4_i) := p_Val2_s_fu_110(128-1-tmp_8_fu_515_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_8_fu_515_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_fu_323_p4 <= grp_fu_178_p2(31 downto 7);
    trunc_ln1014_fu_319_p1 <= rem_fu_98(4 - 1 downto 0);
    trunc_ln1018_fu_363_p1 <= rem_fu_98(8 - 1 downto 0);
    trunc_ln414_1_fu_389_p1 <= add_ln1018_fu_349_p2(4 - 1 downto 0);
    trunc_ln414_fu_385_p1 <= rem_fu_98(4 - 1 downto 0);
    trunc_ln674_1_fu_288_p1 <= grp_fu_178_p2(8 - 1 downto 0);
    trunc_ln674_2_fu_292_p1 <= sub_ln1021_fu_276_p2(8 - 1 downto 0);
    trunc_ln674_3_fu_746_p1 <= sext_ln1021(4 - 1 downto 0);
    trunc_ln674_fu_339_p1 <= grp_fu_178_p2(8 - 1 downto 0);
    xf_bits_per_clock_fu_233_p3 <= 
        last_blk_width_load when (bLast_width_fu_228_p2(0) = '1') else 
        ap_const_lv4_8;
    xor_ln414_fu_717_p2 <= (ap_const_lv8_FF xor and_ln414_fu_711_p2);
    zext_ln1001_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_102),32));
    zext_ln1007_1_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_fu_233_p3),5));
    zext_ln1007_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_fu_233_p3),32));
    zext_ln1008_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ptr_width_minus_fu_248_p3),32));
    zext_ln1021_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1021_fu_265_p3),32));
    zext_ln414_1_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_2_fu_652_p3),8));
    zext_ln414_2_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_1_fu_647_p3),8));
    zext_ln414_3_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln414_2_fu_658_p2),8));
    zext_ln414_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln414_fu_590_p2),8));
    zext_ln674_1_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_2_fu_554_p2),128));
    zext_ln674_2_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln674_1_reg_912),128));
    zext_ln674_3_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_5_fu_474_p3),128));
    zext_ln674_4_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_7_fu_479_p2),128));
    zext_ln674_5_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_8_fu_749_p2),8));
    zext_ln674_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_2_fu_549_p3),128));
end behav;
